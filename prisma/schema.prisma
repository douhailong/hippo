// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  role              Role     @default(user)
  hashedPassword    String
  verificationToken String?  @unique
  verified          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  products     Product[]
  productFiles ProductFile[]
  orders       Order[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Int
  category    Category
  saleStatus  SaleStatus?
  priceId     String?
  stripeId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  productFile ProductFile?
  images      Image[]
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  Order       Order        @relation(fields: [orderId], references: [id])
  orderId     String       @db.ObjectId
}

model ProductFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String?
  fileName  String?
  mimeType  String?
  fileSize  Int?
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique @db.ObjectId
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isPaid    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  user     User?     @relation(fields: [userId], references: [id])
  userId   String?   @db.ObjectId
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  media     Media?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String?
  filename  String?
  mimeType  String?
  filesize  String?
  width     Float?
  height    Float?
  sizes     Size
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String @unique @db.ObjectId
}

type Size {
  thumbnail Detail
  card      Detail
  tablet    Detail
}

type Detail {
  url      String?
  width    Float?
  height   Float?
  mimeType String?
  filesize Float?
  filename String?
}

enum Role {
  user
  admin
}

enum Category {
  uiKits
  icons
}

enum SaleStatus {
  pending
  approved
  denied
}
