// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  phone             String   @unique
  name              String
  avatar            String?
  role              Role     @default(user)
  hashedPassword    String
  verificationToken String?  @unique
  verified          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  stores            Store[]
  orders            Order[]
}

model Order {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  isPaid    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  auther    User      @relation(fields: [autherId], references: [id])
  autherId  String    @db.ObjectId
}

model Store {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  avatar    String?
  score     Float
  covers    String[]
  fans      Int
  categorys Category[]
  auther    User       @relation(fields: [autherId], references: [id])
  autherId  String     @db.ObjectId
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  covers   String[]
  products Product[]
  store    Store     @relation(fields: [storeId], references: [id])
  storeId  String    @db.ObjectId
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  saleStatus  SaleStatus?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  // images      Image[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String      @db.ObjectId
}

enum Role {
  user
  admin
}

enum SaleStatus {
  pending
  approved
  denied
}
